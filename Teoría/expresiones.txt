Coincidencias Básicas
.       - Cualquier Carácter, excepto nueva línea
\d     - Cualquier Dígito (0-9)
\D     - No es un Dígito (0-9)
\w     - Caracter de Palabra (a-z, A-Z, 0-9, _)
\W    - No es un Carácter de Palabra.
\s      - Espacios de cualquier tipo. (espacio, tab, nueva línea)
\n      - Salto de línea
\S      - No es un Espacio, Tab o nueva línea.

Límites
\b      - Límite de Palabra
\B      - No es un Límite de Palabra
^       - Inicio de una cadena de texto 
$       - Final de una cadena de texto

Cuantificadores:
*       - 0 o Más repeticiones 
+       - 1 o Más
?       - 0 o Uno
{3}     - Número Exacto
{3,4}   - Rango de Números (Mínimo, Máximo)

Conjuntos de Caracteres
[ ]      - Caracteres dentro de los brackets 
[^ ]    - Caracteres que NO ESTÁN dentro de los brackets

Grupos
( )     - Grupo
|       - Uno u otro

Escapar caracteres: si quiero buscar un . o \ los tengo que “escapar” escribiendolos como \\ \. y así


search → busca la primera aparición que hay del patrón y muestra dónde está
match → busca que el patrón esté al inicio del texto
findall → devuelve una lista con todas las apariciones del patrón.
group → me permite obtener el string de la búsqueda (re.search(patrón,string).group(1))

Priorizar matches externos → patron = "ipsum(.*)sit"
Priorizar matches internos → patrón = "ipsum(.*?)sit"
La función re.sub permite reemplazar todos las ocurrencias del patrón por otro patrón en un String. → re.sub(patron_a_reemplazar, patron_nuevo, texto)